package com.lubin.chj.view.activity;

import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.v7.app.AlertDialog;
import android.support.v7.widget.Toolbar;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.ListView;
import android.widget.TextView;

import com.lubin.chj.Listener.OnBroadCaseFinishListener;
import com.lubin.chj.R;
import com.lubin.chj.adapter.SearchAdapter;
import com.lubin.chj.bean.Light;
import com.lubin.chj.bean.jsonToBean.QueryPcReturn;
import com.lubin.chj.presenter.IPresenter.ISearchPresenter;
import com.lubin.chj.presenter.SearchPresenterImpl;
import com.lubin.chj.service.BarcodeReceiver;
import com.lubin.chj.service.ScanServiceWithUHF;
import com.lubin.chj.view.activity.VInterface.ISearchView;

import java.util.ArrayList;
import java.util.List;

import butterknife.BindView;
import butterknife.ButterKnife;
import butterknife.OnClick;

/**
 * Created by lubin on 2016/11/8.
 */

public class SearchActivity extends BaseActivity implements ISearchView<List<QueryPcReturn.ListBean>> {


    @BindView(R.id.tb_common)
    Toolbar tbCommon;
    @BindView(R.id.tv_succeedNum)
    TextView tvSucceedNum;
    @BindView(R.id.cb_all)
    CheckBox cbAll;
    @BindView(R.id.lv_search)
    ListView lvSearch;
    @BindView(R.id.btn_light)
    Button btnLight;
    @BindView(R.id.btn_remove)
    Button btnRemove;

    private List<QueryPcReturn.ListBean> listEPC = new ArrayList<>();
    private List<String> container = new ArrayList<>();
    private List<Boolean> flags = new ArrayList<>();
    private SearchAdapter mAdapter;
    private ISearchPresenter mPresenter = new SearchPresenterImpl(this);
    public ScanServiceWithUHF mService = ScanServiceWithUHF.getInstance();
    private String mFlag = "条码";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_search);
        ButterKnife.bind(this);
        initHeader();
        initList();
        initService();
    }

    @Override
    protected void onResume() {
        super.onResume();
        tbCommon.setTitle("搜索");
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu_common, menu);
        return super.onCreateOptionsMenu(menu);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        if (item.getTitle().equals("条码")) {
            mFlag = "" + "电子标签";
        } else {
            mFlag = "条码";
        }
        item.setTitle(mFlag);
        return super.onOptionsItemSelected(item);
    }

    private void initHeader() {
        setSupportActionBar(tbCommon);
        tbCommon.setNavigationIcon(R.mipmap.back);
        tbCommon.setNavigationOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                leave();
            }
        });
    }

    private void initList() {
        cbAll.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                for (int i = 0; i < flags.size(); i++) {
                    flags.set(i, isChecked);
                    String pch = listEPC.get(i).getPch();
                    if (isChecked) {
                        if (!container.contains(pch))
                            container.add(pch);
                    } else {
                        container.remove(pch);
                    }
                    mAdapter.notifyDataSetChanged();
                }
            }
        });
        mAdapter = new SearchAdapter(this, listEPC, flags);
        lvSearch.setAdapter(mAdapter);
        lvSearch.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                String pch = listEPC.get(position).getPch();
                if (flags.get(position)) {
                    flags.set(position, false);
                    container.remove(pch);
                } else {
                    flags.set(position, true);
                    container.add(pch);
                }
                mAdapter.notifyDataSetChanged();
            }
        });
    }

    private void initService() {
        mService.SetHandleFunc(msgHandler);
        BarcodeReceiver.setListener(new OnBroadCaseFinishListener() {
            @Override
            public void onBroadCaseFinish(final String data) {
                runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        addToList(data);
                    }
                });
            }
        });
    }

    @Override
    public void changeBtnView() {
        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                String s1 = btnLight.getText().toString();
                if (s1.equals("亮灯")) {
                    btnLight.setText("灭灯");
                    cbAll.setEnabled(false);
                    lvSearch.setEnabled(false);
                    btnRemove.setEnabled(false);
                } else {
                    btnLight.setText("亮灯");
                    cbAll.setEnabled(true);
                    lvSearch.setEnabled(true);
                    btnRemove.setEnabled(true);
                }
            }
        });
    }

    @Override
    public void ShowData(final List<QueryPcReturn.ListBean> beanList) {
        if (beanList.size() > 0) {
            for (QueryPcReturn.ListBean bean : beanList) {
                for (QueryPcReturn.ListBean listBean : listEPC) {
                    if (listBean.getPch().equals(bean.getPch())) {
                        listBean.setQybh(bean.getQybh());
                        listBean.setGwbh(bean.getGwbh());
                    }
                }
            }
            runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    mAdapter.notifyDataSetChanged();
                }
            });
        }
    }

    private Handler msgHandler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            String str = msg.getData().getString("msg");
            if (null == str || 0 == str.length())
                return;
            if (msg.what == ScanServiceWithUHF.MSG_EPC) { // 标签内容
                String epc = str;
                addToList(epc);
            }
        }
    };

    private void addToList(final String epcCount) {
        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                String[] szInfo = epcCount.split(";");
                String epc = szInfo[0];
                int index = 0;
                for (index = 0; index < listEPC.size(); index++) {
                    QueryPcReturn.ListBean info = listEPC.get(index);
                    // list中有此EPC
                    if (epc.equals(info.getPch())) {
                        break;
                    }
                }

                if (index == listEPC.size()) {
                    QueryPcReturn.ListBean info = new QueryPcReturn.ListBean();
                    info.setPch(epc);
                    listEPC.add(info);
                    flags.add(false);
                }
                mAdapter.notifyDataSetChanged();
                tvSucceedNum.setText(String.valueOf(mAdapter.getCount()));
                lvSearch.setSelection(mAdapter.getCount());
            }
        });
    }

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (event.getRepeatCount() == 0) {
            if (275 == keyCode) {
                if (mFlag.equals("" + "电子标签"))
                    mService.inventory();
                else
                    mService.scanBarcode();
            }
        }
        return true;
    }

    @Override
    public boolean onKeyUp(int keyCode, KeyEvent event) {
        if (event.getRepeatCount() == 0) {
            if (275 == keyCode) {
                if (mFlag.equals("" + "电子标签"))
                    mService.pause();
                else
                    mService.stopScan();
                startQuery();
            } else if (keyCode == KeyEvent.KEYCODE_BACK) {
                mService.pause();
                mService.stopScan();
                finish();
            }
        }
        return true;
    }

    private void startQuery() {
        for (QueryPcReturn.ListBean listBean : listEPC) {
            if (listBean.getPch() != null && listBean.getGwbh() == null) {
                mPresenter.QueryPc(listBean.getPch());
            }
        }
    }

    @Override
    public void onBackPressed() {
        leave();
    }

    private void leave() {
        String s1 = btnLight.getText().toString();
        if (s1.equals("灭灯")) {
            AlertDialog.Builder builder = new AlertDialog.Builder(this);
            builder.setMessage("提示");
            builder.setMessage("灯还亮着，请先灭灯才能退出！");
            builder.setPositiveButton("确定", null);
            builder.show();
        } else {
            finish();
        }
    }

    private List<Light> getLightList(List<String> gwbhs, boolean b) {
        List<Light> list = new ArrayList<>();
        for (String gwbh : gwbhs) {
            Light light = new Light();
            light.gwbh = gwbh;
            light.isOpen = b;
            list.add(light);
        }
        return list;
    }

    @OnClick({R.id.btn_light, R.id.btn_remove})
    public void onClick(View view) {
        switch (view.getId()) {
            case R.id.btn_light:
                List<String> gwbhs = new ArrayList<>();
                for (String s : container) {
                    for (int i = 0; i < listEPC.size(); i++) {
                        QueryPcReturn.ListBean bean = listEPC.get(i);
                        if (bean.getPch().equals(s)) {
                            if (bean.getGwbh() == null) {
                                continue;
                            }
                            String gwbh = bean.getGwbh().toString();
                            if (!gwbhs.contains(gwbh)) {
                                gwbhs.add(gwbh);
                            }
                        }
                    }
                }
                if (gwbhs.size() == 0) return;
                if (btnLight.getText().toString().equals("亮灯")) {
                    List<Light> lightList = getLightList(gwbhs, true);
                    mPresenter.SetLight(lightList);
                } else {
                    List<Light> lightList = getLightList(gwbhs, false);
                    mPresenter.SetLight(lightList);
                }
                break;
            case R.id.btn_remove:
                for (String s : container) {
                    int i;
                    for (i = 0; i < listEPC.size(); i++) {
                        if (listEPC.get(i).getPch().equals(s)) {
                            break;
                        }
                    }
                    listEPC.remove(i);
                    flags.remove(i);
                }
                container.clear();
                if (listEPC.size() == 0) {
                    cbAll.setChecked(false);
                    btnLight.setText("亮灯");
                }
                mAdapter.notifyDataSetChanged();
                tvSucceedNum.setText(String.valueOf(listEPC.size()));
                break;
        }
    }
}
