package com.lubin.bean;

import java.util.List;
import com.lubin.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.lubin.dao.CheckTaskDao;
import com.lubin.dao.EPCDao;
import com.lubin.dao.UserDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "CHECK_TASK".
 */
public class CheckTask implements java.io.Serializable {

    private Long id;
    private String name;
    private Boolean compete;
    private Integer number;
    private java.util.Date date;
    private Long userId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CheckTaskDao myDao;

    private User user;
    private Long user__resolvedKey;

    private List<EPC> EPCs;

    public CheckTask() {
    }

    public CheckTask(Long id) {
        this.id = id;
    }

    public CheckTask(Long id, String name, Boolean compete, Integer number, java.util.Date date, Long userId) {
        this.id = id;
        this.name = name;
        this.compete = compete;
        this.number = number;
        this.date = date;
        this.userId = userId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCheckTaskDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boolean getCompete() {
        return compete;
    }

    public void setCompete(Boolean compete) {
        this.compete = compete;
    }

    public Integer getNumber() {
        return number;
    }

    public void setNumber(Integer number) {
        this.number = number;
    }

    public java.util.Date getDate() {
        return date;
    }

    public void setDate(java.util.Date date) {
        this.date = date;
    }

    public Long getUserId() {
        return userId;
    }

    public void setUserId(Long userId) {
        this.userId = userId;
    }

    /** To-one relationship, resolved on first access. */
    public User getUser() {
        Long __key = this.userId;
        if (user__resolvedKey == null || !user__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User userNew = targetDao.load(__key);
            synchronized (this) {
                user = userNew;
            	user__resolvedKey = __key;
            }
        }
        return user;
    }

    public void setUser(User user) {
        synchronized (this) {
            this.user = user;
            userId = user == null ? null : user.getId();
            user__resolvedKey = userId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<EPC> getEPCs() {
        if (EPCs == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            EPCDao targetDao = daoSession.getEPCDao();
            List<EPC> EPCsNew = targetDao._queryCheckTask_EPCs(id);
            synchronized (this) {
                if(EPCs == null) {
                    EPCs = EPCsNew;
                }
            }
        }
        return EPCs;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetEPCs() {
        EPCs = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
