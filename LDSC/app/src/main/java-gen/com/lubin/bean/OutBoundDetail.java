package com.lubin.bean;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import com.lubin.dao.DaoSession;
import org.greenrobot.greendao.DaoException;

import com.lubin.dao.OutBoundDetailDao;
import com.lubin.dao.OutBoundOperateDao;
import com.lubin.dao.OutBoundOrderDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "OUT_BOUND_DETAIL".
 */
@Entity(active = true)
public class OutBoundDetail {

    @Id
    private Long id;
    private String barcode;
    private Integer operateQty;
    private Integer qty;
    private java.util.Date refreshTime;
    private String skuName;
    private Long outBoundOrderId;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient OutBoundDetailDao myDao;

    @ToOne(joinProperty = "outBoundOrderId")
    private OutBoundOrder outBoundOrder;

    @Generated
    private transient Long outBoundOrder__resolvedKey;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "outBoundDetailId")
    })
    private List<OutBoundOperate> Operates;

    @Generated
    public OutBoundDetail() {
    }

    public OutBoundDetail(Long id) {
        this.id = id;
    }

    @Generated
    public OutBoundDetail(Long id, String barcode, Integer operateQty, Integer qty, java.util.Date refreshTime, String skuName, Long outBoundOrderId) {
        this.id = id;
        this.barcode = barcode;
        this.operateQty = operateQty;
        this.qty = qty;
        this.refreshTime = refreshTime;
        this.skuName = skuName;
        this.outBoundOrderId = outBoundOrderId;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getOutBoundDetailDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getBarcode() {
        return barcode;
    }

    public void setBarcode(String barcode) {
        this.barcode = barcode;
    }

    public Integer getOperateQty() {
        return operateQty;
    }

    public void setOperateQty(Integer operateQty) {
        this.operateQty = operateQty;
    }

    public Integer getQty() {
        return qty;
    }

    public void setQty(Integer qty) {
        this.qty = qty;
    }

    public java.util.Date getRefreshTime() {
        return refreshTime;
    }

    public void setRefreshTime(java.util.Date refreshTime) {
        this.refreshTime = refreshTime;
    }

    public String getSkuName() {
        return skuName;
    }

    public void setSkuName(String skuName) {
        this.skuName = skuName;
    }

    public Long getOutBoundOrderId() {
        return outBoundOrderId;
    }

    public void setOutBoundOrderId(Long outBoundOrderId) {
        this.outBoundOrderId = outBoundOrderId;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public OutBoundOrder getOutBoundOrder() {
        Long __key = this.outBoundOrderId;
        if (outBoundOrder__resolvedKey == null || !outBoundOrder__resolvedKey.equals(__key)) {
            __throwIfDetached();
            OutBoundOrderDao targetDao = daoSession.getOutBoundOrderDao();
            OutBoundOrder outBoundOrderNew = targetDao.load(__key);
            synchronized (this) {
                outBoundOrder = outBoundOrderNew;
            	outBoundOrder__resolvedKey = __key;
            }
        }
        return outBoundOrder;
    }

    @Generated
    public void setOutBoundOrder(OutBoundOrder outBoundOrder) {
        synchronized (this) {
            this.outBoundOrder = outBoundOrder;
            outBoundOrderId = outBoundOrder == null ? null : outBoundOrder.getId();
            outBoundOrder__resolvedKey = outBoundOrderId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<OutBoundOperate> getOperates() {
        if (Operates == null) {
            __throwIfDetached();
            OutBoundOperateDao targetDao = daoSession.getOutBoundOperateDao();
            List<OutBoundOperate> OperatesNew = targetDao._queryOutBoundDetail_Operates(id);
            synchronized (this) {
                if(Operates == null) {
                    Operates = OperatesNew;
                }
            }
        }
        return Operates;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetOperates() {
        Operates = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
