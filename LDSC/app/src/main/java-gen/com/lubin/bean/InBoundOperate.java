package com.lubin.bean;

import org.greenrobot.greendao.annotation.*;

import com.lubin.dao.DaoSession;
import org.greenrobot.greendao.DaoException;

import com.lubin.dao.InBoundCaseDao;
import com.lubin.dao.InBoundDetailDao;
import com.lubin.dao.InBoundOperateDao;
import com.lubin.dao.InBoundOrderDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "IN_BOUND_OPERATE".
 */
@Entity(active = true)
public class InBoundOperate implements java.io.Serializable {

    @Id
    private Long id;
    private String barcode;
    private String epc;
    private String deviceId;
    private String multiBarcodeId;
    private Integer qty;
    private Integer operateQty;
    private Boolean isUpload;
    private Long inBoundOrderId;
    private Long inBoundCaseId;
    private Long inBoundDetailId;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient InBoundOperateDao myDao;

    @ToOne(joinProperty = "inBoundOrderId")
    private InBoundOrder inBoundOrder;

    @Generated
    private transient Long inBoundOrder__resolvedKey;

    @ToOne(joinProperty = "inBoundCaseId")
    private InBoundCase inBoundCase;

    @Generated
    private transient Long inBoundCase__resolvedKey;

    @ToOne(joinProperty = "inBoundDetailId")
    private InBoundDetail inBoundDetail;

    @Generated
    private transient Long inBoundDetail__resolvedKey;

    @Generated
    public InBoundOperate() {
    }

    public InBoundOperate(Long id) {
        this.id = id;
    }

    @Generated
    public InBoundOperate(Long id, String barcode, String epc, String deviceId, String multiBarcodeId, Integer qty, Integer operateQty, Boolean isUpload, Long inBoundOrderId, Long inBoundCaseId, Long inBoundDetailId) {
        this.id = id;
        this.barcode = barcode;
        this.epc = epc;
        this.deviceId = deviceId;
        this.multiBarcodeId = multiBarcodeId;
        this.qty = qty;
        this.operateQty = operateQty;
        this.isUpload = isUpload;
        this.inBoundOrderId = inBoundOrderId;
        this.inBoundCaseId = inBoundCaseId;
        this.inBoundDetailId = inBoundDetailId;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getInBoundOperateDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getBarcode() {
        return barcode;
    }

    public void setBarcode(String barcode) {
        this.barcode = barcode;
    }

    public String getEpc() {
        return epc;
    }

    public void setEpc(String epc) {
        this.epc = epc;
    }

    public String getDeviceId() {
        return deviceId;
    }

    public void setDeviceId(String deviceId) {
        this.deviceId = deviceId;
    }

    public String getMultiBarcodeId() {
        return multiBarcodeId;
    }

    public void setMultiBarcodeId(String multiBarcodeId) {
        this.multiBarcodeId = multiBarcodeId;
    }

    public Integer getQty() {
        return qty;
    }

    public void setQty(Integer qty) {
        this.qty = qty;
    }

    public Integer getOperateQty() {
        return operateQty;
    }

    public void setOperateQty(Integer operateQty) {
        this.operateQty = operateQty;
    }

    public Boolean getIsUpload() {
        return isUpload;
    }

    public void setIsUpload(Boolean isUpload) {
        this.isUpload = isUpload;
    }

    public Long getInBoundOrderId() {
        return inBoundOrderId;
    }

    public void setInBoundOrderId(Long inBoundOrderId) {
        this.inBoundOrderId = inBoundOrderId;
    }

    public Long getInBoundCaseId() {
        return inBoundCaseId;
    }

    public void setInBoundCaseId(Long inBoundCaseId) {
        this.inBoundCaseId = inBoundCaseId;
    }

    public Long getInBoundDetailId() {
        return inBoundDetailId;
    }

    public void setInBoundDetailId(Long inBoundDetailId) {
        this.inBoundDetailId = inBoundDetailId;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public InBoundOrder getInBoundOrder() {
        Long __key = this.inBoundOrderId;
        if (inBoundOrder__resolvedKey == null || !inBoundOrder__resolvedKey.equals(__key)) {
            __throwIfDetached();
            InBoundOrderDao targetDao = daoSession.getInBoundOrderDao();
            InBoundOrder inBoundOrderNew = targetDao.load(__key);
            synchronized (this) {
                inBoundOrder = inBoundOrderNew;
            	inBoundOrder__resolvedKey = __key;
            }
        }
        return inBoundOrder;
    }

    @Generated
    public void setInBoundOrder(InBoundOrder inBoundOrder) {
        synchronized (this) {
            this.inBoundOrder = inBoundOrder;
            inBoundOrderId = inBoundOrder == null ? null : inBoundOrder.getId();
            inBoundOrder__resolvedKey = inBoundOrderId;
        }
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public InBoundCase getInBoundCase() {
        Long __key = this.inBoundCaseId;
        if (inBoundCase__resolvedKey == null || !inBoundCase__resolvedKey.equals(__key)) {
            __throwIfDetached();
            InBoundCaseDao targetDao = daoSession.getInBoundCaseDao();
            InBoundCase inBoundCaseNew = targetDao.load(__key);
            synchronized (this) {
                inBoundCase = inBoundCaseNew;
            	inBoundCase__resolvedKey = __key;
            }
        }
        return inBoundCase;
    }

    @Generated
    public void setInBoundCase(InBoundCase inBoundCase) {
        synchronized (this) {
            this.inBoundCase = inBoundCase;
            inBoundCaseId = inBoundCase == null ? null : inBoundCase.getId();
            inBoundCase__resolvedKey = inBoundCaseId;
        }
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public InBoundDetail getInBoundDetail() {
        Long __key = this.inBoundDetailId;
        if (inBoundDetail__resolvedKey == null || !inBoundDetail__resolvedKey.equals(__key)) {
            __throwIfDetached();
            InBoundDetailDao targetDao = daoSession.getInBoundDetailDao();
            InBoundDetail inBoundDetailNew = targetDao.load(__key);
            synchronized (this) {
                inBoundDetail = inBoundDetailNew;
            	inBoundDetail__resolvedKey = __key;
            }
        }
        return inBoundDetail;
    }

    @Generated
    public void setInBoundDetail(InBoundDetail inBoundDetail) {
        synchronized (this) {
            this.inBoundDetail = inBoundDetail;
            inBoundDetailId = inBoundDetail == null ? null : inBoundDetail.getId();
            inBoundDetail__resolvedKey = inBoundDetailId;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
