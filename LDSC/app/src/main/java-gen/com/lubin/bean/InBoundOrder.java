package com.lubin.bean;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import com.lubin.dao.DaoSession;
import org.greenrobot.greendao.DaoException;

import com.lubin.dao.InBoundCaseDao;
import com.lubin.dao.InBoundDetailDao;
import com.lubin.dao.InBoundOperateDao;
import com.lubin.dao.InBoundOrderDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "IN_BOUND_ORDER".
 */
@Entity(active = true)
public class InBoundOrder {

    @Id
    private Long id;
    private String code;
    private String orderId;
    private String formWarehouseName;
    private String toWarehouseCode;
    private String inboundMode;
    private String date;
    private java.util.Date dateAtLocation;
    private Integer qty;
    private Integer operateQty;
    private Integer status;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient InBoundOrderDao myDao;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "inBoundOrderId")
    })
    private List<InBoundCase> cases;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "inBoundOrderId")
    })
    private List<InBoundDetail> Details;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "inBoundOrderId")
    })
    private List<InBoundOperate> Operates;

    @Generated
    public InBoundOrder() {
    }

    public InBoundOrder(Long id) {
        this.id = id;
    }

    @Generated
    public InBoundOrder(Long id, String code, String orderId, String formWarehouseName, String toWarehouseCode, String inboundMode, String date, java.util.Date dateAtLocation, Integer qty, Integer operateQty, Integer status) {
        this.id = id;
        this.code = code;
        this.orderId = orderId;
        this.formWarehouseName = formWarehouseName;
        this.toWarehouseCode = toWarehouseCode;
        this.inboundMode = inboundMode;
        this.date = date;
        this.dateAtLocation = dateAtLocation;
        this.qty = qty;
        this.operateQty = operateQty;
        this.status = status;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getInBoundOrderDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getCode() {
        return code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    public String getOrderId() {
        return orderId;
    }

    public void setOrderId(String orderId) {
        this.orderId = orderId;
    }

    public String getFormWarehouseName() {
        return formWarehouseName;
    }

    public void setFormWarehouseName(String formWarehouseName) {
        this.formWarehouseName = formWarehouseName;
    }

    public String getToWarehouseCode() {
        return toWarehouseCode;
    }

    public void setToWarehouseCode(String toWarehouseCode) {
        this.toWarehouseCode = toWarehouseCode;
    }

    public String getInboundMode() {
        return inboundMode;
    }

    public void setInboundMode(String inboundMode) {
        this.inboundMode = inboundMode;
    }

    public String getDate() {
        return date;
    }

    public void setDate(String date) {
        this.date = date;
    }

    public java.util.Date getDateAtLocation() {
        return dateAtLocation;
    }

    public void setDateAtLocation(java.util.Date dateAtLocation) {
        this.dateAtLocation = dateAtLocation;
    }

    public Integer getQty() {
        return qty;
    }

    public void setQty(Integer qty) {
        this.qty = qty;
    }

    public Integer getOperateQty() {
        return operateQty;
    }

    public void setOperateQty(Integer operateQty) {
        this.operateQty = operateQty;
    }

    public Integer getStatus() {
        return status;
    }

    public void setStatus(Integer status) {
        this.status = status;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<InBoundCase> getCases() {
        if (cases == null) {
            __throwIfDetached();
            InBoundCaseDao targetDao = daoSession.getInBoundCaseDao();
            List<InBoundCase> casesNew = targetDao._queryInBoundOrder_Cases(id);
            synchronized (this) {
                if(cases == null) {
                    cases = casesNew;
                }
            }
        }
        return cases;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetCases() {
        cases = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<InBoundDetail> getDetails() {
        if (Details == null) {
            __throwIfDetached();
            InBoundDetailDao targetDao = daoSession.getInBoundDetailDao();
            List<InBoundDetail> DetailsNew = targetDao._queryInBoundOrder_Details(id);
            synchronized (this) {
                if(Details == null) {
                    Details = DetailsNew;
                }
            }
        }
        return Details;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetDetails() {
        Details = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<InBoundOperate> getOperates() {
        if (Operates == null) {
            __throwIfDetached();
            InBoundOperateDao targetDao = daoSession.getInBoundOperateDao();
            List<InBoundOperate> OperatesNew = targetDao._queryInBoundOrder_Operates(id);
            synchronized (this) {
                if(Operates == null) {
                    Operates = OperatesNew;
                }
            }
        }
        return Operates;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetOperates() {
        Operates = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
