package com.lubin.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lubin.bean.Collect;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COLLECT".
*/
public class CollectDao extends AbstractDao<Collect, Long> {

    public static final String TABLENAME = "COLLECT";

    /**
     * Properties of entity Collect.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TakeStockOrder = new Property(1, String.class, "takeStockOrder", false, "TAKE_STOCK_ORDER");
        public final static Property TakeStockTask = new Property(2, String.class, "takeStockTask", false, "TAKE_STOCK_TASK");
        public final static Property Epc = new Property(3, String.class, "epc", false, "EPC");
        public final static Property IsUploading = new Property(4, Boolean.class, "isUploading", false, "IS_UPLOADING");
    }


    public CollectDao(DaoConfig config) {
        super(config);
    }
    
    public CollectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COLLECT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TAKE_STOCK_ORDER\" TEXT," + // 1: takeStockOrder
                "\"TAKE_STOCK_TASK\" TEXT," + // 2: takeStockTask
                "\"EPC\" TEXT," + // 3: epc
                "\"IS_UPLOADING\" INTEGER);"); // 4: isUploading
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COLLECT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Collect entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String takeStockOrder = entity.getTakeStockOrder();
        if (takeStockOrder != null) {
            stmt.bindString(2, takeStockOrder);
        }
 
        String takeStockTask = entity.getTakeStockTask();
        if (takeStockTask != null) {
            stmt.bindString(3, takeStockTask);
        }
 
        String epc = entity.getEpc();
        if (epc != null) {
            stmt.bindString(4, epc);
        }
 
        Boolean isUploading = entity.getIsUploading();
        if (isUploading != null) {
            stmt.bindLong(5, isUploading ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Collect entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String takeStockOrder = entity.getTakeStockOrder();
        if (takeStockOrder != null) {
            stmt.bindString(2, takeStockOrder);
        }
 
        String takeStockTask = entity.getTakeStockTask();
        if (takeStockTask != null) {
            stmt.bindString(3, takeStockTask);
        }
 
        String epc = entity.getEpc();
        if (epc != null) {
            stmt.bindString(4, epc);
        }
 
        Boolean isUploading = entity.getIsUploading();
        if (isUploading != null) {
            stmt.bindLong(5, isUploading ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Collect readEntity(Cursor cursor, int offset) {
        Collect entity = new Collect( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // takeStockOrder
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // takeStockTask
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // epc
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0 // isUploading
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Collect entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTakeStockOrder(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTakeStockTask(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEpc(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsUploading(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Collect entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Collect entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Collect entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
