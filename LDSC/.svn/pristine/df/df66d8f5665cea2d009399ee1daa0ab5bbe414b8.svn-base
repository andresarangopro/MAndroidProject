package com.lubin.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.lubin.bean.InBoundOrder;

import com.lubin.bean.InBoundCase;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IN_BOUND_CASE".
*/
public class InBoundCaseDao extends AbstractDao<InBoundCase, Long> {

    public static final String TABLENAME = "IN_BOUND_CASE";

    /**
     * Properties of entity InBoundCase.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Qty = new Property(1, Integer.class, "qty", false, "QTY");
        public final static Property OperateQty = new Property(2, Integer.class, "operateQty", false, "OPERATE_QTY");
        public final static Property Code = new Property(3, String.class, "code", false, "CODE");
        public final static Property CaseId = new Property(4, String.class, "caseId", false, "CASE_ID");
        public final static Property Status = new Property(5, Integer.class, "status", false, "STATUS");
        public final static Property InBoundOrderId = new Property(6, Long.class, "inBoundOrderId", false, "IN_BOUND_ORDER_ID");
    }

    private DaoSession daoSession;

    private Query<InBoundCase> inBoundOrder_CasesQuery;

    public InBoundCaseDao(DaoConfig config) {
        super(config);
    }
    
    public InBoundCaseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IN_BOUND_CASE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"QTY\" INTEGER," + // 1: qty
                "\"OPERATE_QTY\" INTEGER," + // 2: operateQty
                "\"CODE\" TEXT," + // 3: code
                "\"CASE_ID\" TEXT," + // 4: caseId
                "\"STATUS\" INTEGER," + // 5: status
                "\"IN_BOUND_ORDER_ID\" INTEGER);"); // 6: inBoundOrderId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IN_BOUND_CASE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, InBoundCase entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer qty = entity.getQty();
        if (qty != null) {
            stmt.bindLong(2, qty);
        }
 
        Integer operateQty = entity.getOperateQty();
        if (operateQty != null) {
            stmt.bindLong(3, operateQty);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(4, code);
        }
 
        String caseId = entity.getCaseId();
        if (caseId != null) {
            stmt.bindString(5, caseId);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(6, status);
        }
 
        Long inBoundOrderId = entity.getInBoundOrderId();
        if (inBoundOrderId != null) {
            stmt.bindLong(7, inBoundOrderId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, InBoundCase entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer qty = entity.getQty();
        if (qty != null) {
            stmt.bindLong(2, qty);
        }
 
        Integer operateQty = entity.getOperateQty();
        if (operateQty != null) {
            stmt.bindLong(3, operateQty);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(4, code);
        }
 
        String caseId = entity.getCaseId();
        if (caseId != null) {
            stmt.bindString(5, caseId);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(6, status);
        }
 
        Long inBoundOrderId = entity.getInBoundOrderId();
        if (inBoundOrderId != null) {
            stmt.bindLong(7, inBoundOrderId);
        }
    }

    @Override
    protected final void attachEntity(InBoundCase entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public InBoundCase readEntity(Cursor cursor, int offset) {
        InBoundCase entity = new InBoundCase( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // qty
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // operateQty
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // code
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // caseId
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // status
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // inBoundOrderId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, InBoundCase entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setQty(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setOperateQty(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCaseId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStatus(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setInBoundOrderId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(InBoundCase entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(InBoundCase entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(InBoundCase entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "cases" to-many relationship of InBoundOrder. */
    public List<InBoundCase> _queryInBoundOrder_Cases(Long inBoundOrderId) {
        synchronized (this) {
            if (inBoundOrder_CasesQuery == null) {
                QueryBuilder<InBoundCase> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.InBoundOrderId.eq(null));
                inBoundOrder_CasesQuery = queryBuilder.build();
            }
        }
        Query<InBoundCase> query = inBoundOrder_CasesQuery.forCurrentThread();
        query.setParameter(0, inBoundOrderId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getInBoundOrderDao().getAllColumns());
            builder.append(" FROM IN_BOUND_CASE T");
            builder.append(" LEFT JOIN IN_BOUND_ORDER T0 ON T.\"IN_BOUND_ORDER_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected InBoundCase loadCurrentDeep(Cursor cursor, boolean lock) {
        InBoundCase entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        InBoundOrder inBoundOrder = loadCurrentOther(daoSession.getInBoundOrderDao(), cursor, offset);
        entity.setInBoundOrder(inBoundOrder);

        return entity;    
    }

    public InBoundCase loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<InBoundCase> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<InBoundCase> list = new ArrayList<InBoundCase>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<InBoundCase> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<InBoundCase> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
