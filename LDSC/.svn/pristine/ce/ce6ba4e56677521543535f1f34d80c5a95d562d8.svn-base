package com.lubin.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lubin.bean.TakeStockSkuCollect;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TAKE_STOCK_SKU_COLLECT".
*/
public class TakeStockSkuCollectDao extends AbstractDao<TakeStockSkuCollect, Long> {

    public static final String TABLENAME = "TAKE_STOCK_SKU_COLLECT";

    /**
     * Properties of entity TakeStockSkuCollect.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TargetNum = new Property(1, Integer.class, "targetNum", false, "TARGET_NUM");
        public final static Property OrderCode = new Property(2, String.class, "orderCode", false, "ORDER_CODE");
        public final static Property TaskCode = new Property(3, String.class, "taskCode", false, "TASK_CODE");
        public final static Property Barcode = new Property(4, String.class, "barcode", false, "BARCODE");
        public final static Property Date = new Property(5, java.util.Date.class, "date", false, "DATE");
        public final static Property MultiBarcodeId = new Property(6, String.class, "multiBarcodeId", false, "MULTI_BARCODE_ID");
        public final static Property Num = new Property(7, Integer.class, "num", false, "NUM");
        public final static Property IsUploading = new Property(8, Boolean.class, "isUploading", false, "IS_UPLOADING");
    }


    public TakeStockSkuCollectDao(DaoConfig config) {
        super(config);
    }
    
    public TakeStockSkuCollectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TAKE_STOCK_SKU_COLLECT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TARGET_NUM\" INTEGER," + // 1: targetNum
                "\"ORDER_CODE\" TEXT," + // 2: orderCode
                "\"TASK_CODE\" TEXT," + // 3: taskCode
                "\"BARCODE\" TEXT," + // 4: barcode
                "\"DATE\" INTEGER," + // 5: date
                "\"MULTI_BARCODE_ID\" TEXT," + // 6: multiBarcodeId
                "\"NUM\" INTEGER," + // 7: num
                "\"IS_UPLOADING\" INTEGER);"); // 8: isUploading
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TAKE_STOCK_SKU_COLLECT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TakeStockSkuCollect entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer targetNum = entity.getTargetNum();
        if (targetNum != null) {
            stmt.bindLong(2, targetNum);
        }
 
        String orderCode = entity.getOrderCode();
        if (orderCode != null) {
            stmt.bindString(3, orderCode);
        }
 
        String taskCode = entity.getTaskCode();
        if (taskCode != null) {
            stmt.bindString(4, taskCode);
        }
 
        String barcode = entity.getBarcode();
        if (barcode != null) {
            stmt.bindString(5, barcode);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(6, date.getTime());
        }
 
        String multiBarcodeId = entity.getMultiBarcodeId();
        if (multiBarcodeId != null) {
            stmt.bindString(7, multiBarcodeId);
        }
 
        Integer num = entity.getNum();
        if (num != null) {
            stmt.bindLong(8, num);
        }
 
        Boolean isUploading = entity.getIsUploading();
        if (isUploading != null) {
            stmt.bindLong(9, isUploading ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TakeStockSkuCollect entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer targetNum = entity.getTargetNum();
        if (targetNum != null) {
            stmt.bindLong(2, targetNum);
        }
 
        String orderCode = entity.getOrderCode();
        if (orderCode != null) {
            stmt.bindString(3, orderCode);
        }
 
        String taskCode = entity.getTaskCode();
        if (taskCode != null) {
            stmt.bindString(4, taskCode);
        }
 
        String barcode = entity.getBarcode();
        if (barcode != null) {
            stmt.bindString(5, barcode);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(6, date.getTime());
        }
 
        String multiBarcodeId = entity.getMultiBarcodeId();
        if (multiBarcodeId != null) {
            stmt.bindString(7, multiBarcodeId);
        }
 
        Integer num = entity.getNum();
        if (num != null) {
            stmt.bindLong(8, num);
        }
 
        Boolean isUploading = entity.getIsUploading();
        if (isUploading != null) {
            stmt.bindLong(9, isUploading ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TakeStockSkuCollect readEntity(Cursor cursor, int offset) {
        TakeStockSkuCollect entity = new TakeStockSkuCollect( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // targetNum
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // orderCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // taskCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // barcode
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // date
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // multiBarcodeId
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // num
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0 // isUploading
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TakeStockSkuCollect entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTargetNum(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setOrderCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTaskCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBarcode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setMultiBarcodeId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNum(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setIsUploading(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TakeStockSkuCollect entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TakeStockSkuCollect entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TakeStockSkuCollect entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
