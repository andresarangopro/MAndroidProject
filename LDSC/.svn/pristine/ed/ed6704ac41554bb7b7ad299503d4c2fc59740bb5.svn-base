package com.lide.app.ui.inbound.LS;

import android.os.Bundle;
import android.support.v7.widget.Toolbar;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.TextView;

import com.lide.app.R;
import com.lide.app.adapter.ViewPagerAdapter;
import com.lide.app.persistence.util.Utils;
import com.lide.app.persistence.view.LazyViewPager;
import com.lide.app.persistence.view.NoScrollViewPager;
import com.lide.app.ui.BaseActivity;
import com.lide.app.ui.FragmentBase;

import java.util.ArrayList;
import java.util.List;

import butterknife.BindView;
import butterknife.ButterKnife;

public class InboundActivity extends BaseActivity {


    public static List<FragmentBase> fragments;
    public ViewPagerAdapter viewPagerAdapter;

    @BindView(R.id.tv_common)
    TextView tvCommon;
    @BindView(R.id.tb_common)
    Toolbar tbCommon;
    @BindView(R.id.vp_common)
    NoScrollViewPager vpCommon;

    public Long orderId;
    public Long caseId;
    public boolean isMixedModel = false;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_common);
        ButterKnife.bind(this);
        initData();
        initViews();
    }

    private void initData() {
        orderId = getIntent().getLongExtra("orderId", 0);
        caseId = getIntent().getLongExtra("caseId", 0);
        String inboundModel = getIntent().getStringExtra("inboundModel");
        if (inboundModel.equals("MIX")) {
            isMixedModel = true;
        } else {
            isMixedModel = false;
        }
    }

    @Override
    protected void onResume() {
        if (Utils.getCurrentUser() != null)
            tvCommon.setText(Utils.getCurrentUser().getWarehouseCode());
        tbCommon.setTitle("");
        super.onResume();

    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu_particulars, menu);
        return true;
    }

    private void initViews() {
        setSupportActionBar(tbCommon);

        vpCommon.setOnPageChangeListener(new LazyViewPager.OnPageChangeListener() {
            @Override
            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {

            }

            @Override
            public void onPageSelected(int position) {
                invalidateOptionsMenu();
            }

            @Override
            public void onPageScrollStateChanged(int state) {

            }
        });

        tbCommon.setNavigationIcon(R.mipmap.back_login);
        tbCommon.setNavigationOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                onFinish();
            }
        });

        tbCommon.setOnMenuItemClickListener(new Toolbar.OnMenuItemClickListener() {
            @Override
            public boolean onMenuItemClick(MenuItem item) {
                switch (item.getItemId()) {
                    case R.id.mangenment_upload: //上传
                        switch (vpCommon.getCurrentItem()) {
                            case 0:
                                ((InboundDetailFragment) fragments.get(0)).upload();
                                break;
                        }
                        break;
                }
                return true;
            }
        });

        fragments = new ArrayList<>();
        fragments.add(new InboundDetailFragment());
        fragments.add(new ScanningRFIDForMixFragment());
        fragments.add(new ScanningRFIDFragment());
        fragments.add(new ScanningSkuForMixFragment());
        fragments.add(new ScanningSkuFragment());
        fragments.add(new RFIDResultsFragment());
        fragments.add(new ErrorResultsFragment());

        viewPagerAdapter = new ViewPagerAdapter(getSupportFragmentManager(), fragments);
        vpCommon.setAdapter(viewPagerAdapter);
        vpCommon.setOffscreenPageLimit(7);
    }

    //按钮失效
    public void setViewEnabled(boolean enabled) {
        if (enabled) {
            tbCommon.setVisibility(View.VISIBLE);
        } else {
            tbCommon.setVisibility(View.INVISIBLE);
        }
    }

    public void setCurrentFragment(int currentFragment) {
        vpCommon.setCurrentItem(currentFragment);
    }

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (keyCode == 139 || keyCode == 120 || keyCode == 138) {
            if (event.getRepeatCount() == 0) {
                switch (vpCommon.getCurrentItem()) {
                    case 1:
                        fragments.get(1).readOrClose();
                        break;
                    case 2:
                        fragments.get(2).readOrClose();
                        break;
                    case 3:
                        fragments.get(3).startScan();
                        break;
                    case 4:
                        fragments.get(4).startScan();
                        break;
                }
                return true;
            }
        }
        return super.onKeyDown(keyCode, event);
    }


    @Override
    public boolean onPrepareOptionsMenu(Menu menu) {
        if (vpCommon.getCurrentItem() == 0) {
            menu.findItem(R.id.mangenment_upload).setVisible(true);
        } else {
            menu.findItem(R.id.mangenment_upload).setVisible(false);
        }
        return super.onPrepareOptionsMenu(menu);
    }

    @Override
    public void onBackPressed() {
        onFinish();
    }

    private void onFinish() {
        if (vpCommon.getCurrentItem() - 1 >= 0) {
            if (vpCommon.getCurrentItem() == 5 || vpCommon.getCurrentItem() == 6) {
                if (isMixedModel)
                    vpCommon.setCurrentItem(1);
                else
                    vpCommon.setCurrentItem(2);
            } else {
                vpCommon.setCurrentItem(0);
            }
        } else {
            finish();
        }
    }
}
