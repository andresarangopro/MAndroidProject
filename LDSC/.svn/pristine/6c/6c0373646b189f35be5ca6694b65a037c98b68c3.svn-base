package com.lubin.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.lubin.bean.OutBoundOrder;

import com.lubin.bean.OutBoundDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "OUT_BOUND_DETAIL".
*/
public class OutBoundDetailDao extends AbstractDao<OutBoundDetail, Long> {

    public static final String TABLENAME = "OUT_BOUND_DETAIL";

    /**
     * Properties of entity OutBoundDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Barcode = new Property(1, String.class, "barcode", false, "BARCODE");
        public final static Property OperateQty = new Property(2, Integer.class, "operateQty", false, "OPERATE_QTY");
        public final static Property Qty = new Property(3, Integer.class, "qty", false, "QTY");
        public final static Property RefreshTime = new Property(4, java.util.Date.class, "refreshTime", false, "REFRESH_TIME");
        public final static Property SkuName = new Property(5, String.class, "skuName", false, "SKU_NAME");
        public final static Property OutBoundOrderId = new Property(6, Long.class, "outBoundOrderId", false, "OUT_BOUND_ORDER_ID");
    }

    private DaoSession daoSession;

    private Query<OutBoundDetail> outBoundOrder_DetailsQuery;

    public OutBoundDetailDao(DaoConfig config) {
        super(config);
    }
    
    public OutBoundDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"OUT_BOUND_DETAIL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"BARCODE\" TEXT," + // 1: barcode
                "\"OPERATE_QTY\" INTEGER," + // 2: operateQty
                "\"QTY\" INTEGER," + // 3: qty
                "\"REFRESH_TIME\" INTEGER," + // 4: refreshTime
                "\"SKU_NAME\" TEXT," + // 5: skuName
                "\"OUT_BOUND_ORDER_ID\" INTEGER);"); // 6: outBoundOrderId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OUT_BOUND_DETAIL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OutBoundDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String barcode = entity.getBarcode();
        if (barcode != null) {
            stmt.bindString(2, barcode);
        }
 
        Integer operateQty = entity.getOperateQty();
        if (operateQty != null) {
            stmt.bindLong(3, operateQty);
        }
 
        Integer qty = entity.getQty();
        if (qty != null) {
            stmt.bindLong(4, qty);
        }
 
        java.util.Date refreshTime = entity.getRefreshTime();
        if (refreshTime != null) {
            stmt.bindLong(5, refreshTime.getTime());
        }
 
        String skuName = entity.getSkuName();
        if (skuName != null) {
            stmt.bindString(6, skuName);
        }
 
        Long outBoundOrderId = entity.getOutBoundOrderId();
        if (outBoundOrderId != null) {
            stmt.bindLong(7, outBoundOrderId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OutBoundDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String barcode = entity.getBarcode();
        if (barcode != null) {
            stmt.bindString(2, barcode);
        }
 
        Integer operateQty = entity.getOperateQty();
        if (operateQty != null) {
            stmt.bindLong(3, operateQty);
        }
 
        Integer qty = entity.getQty();
        if (qty != null) {
            stmt.bindLong(4, qty);
        }
 
        java.util.Date refreshTime = entity.getRefreshTime();
        if (refreshTime != null) {
            stmt.bindLong(5, refreshTime.getTime());
        }
 
        String skuName = entity.getSkuName();
        if (skuName != null) {
            stmt.bindString(6, skuName);
        }
 
        Long outBoundOrderId = entity.getOutBoundOrderId();
        if (outBoundOrderId != null) {
            stmt.bindLong(7, outBoundOrderId);
        }
    }

    @Override
    protected final void attachEntity(OutBoundDetail entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public OutBoundDetail readEntity(Cursor cursor, int offset) {
        OutBoundDetail entity = new OutBoundDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // barcode
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // operateQty
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // qty
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // refreshTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // skuName
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // outBoundOrderId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OutBoundDetail entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBarcode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOperateQty(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setQty(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setRefreshTime(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setSkuName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOutBoundOrderId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(OutBoundDetail entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(OutBoundDetail entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OutBoundDetail entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "Details" to-many relationship of OutBoundOrder. */
    public List<OutBoundDetail> _queryOutBoundOrder_Details(Long outBoundOrderId) {
        synchronized (this) {
            if (outBoundOrder_DetailsQuery == null) {
                QueryBuilder<OutBoundDetail> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.OutBoundOrderId.eq(null));
                outBoundOrder_DetailsQuery = queryBuilder.build();
            }
        }
        Query<OutBoundDetail> query = outBoundOrder_DetailsQuery.forCurrentThread();
        query.setParameter(0, outBoundOrderId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getOutBoundOrderDao().getAllColumns());
            builder.append(" FROM OUT_BOUND_DETAIL T");
            builder.append(" LEFT JOIN OUT_BOUND_ORDER T0 ON T.\"OUT_BOUND_ORDER_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected OutBoundDetail loadCurrentDeep(Cursor cursor, boolean lock) {
        OutBoundDetail entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        OutBoundOrder outBoundOrder = loadCurrentOther(daoSession.getOutBoundOrderDao(), cursor, offset);
        entity.setOutBoundOrder(outBoundOrder);

        return entity;    
    }

    public OutBoundDetail loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<OutBoundDetail> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<OutBoundDetail> list = new ArrayList<OutBoundDetail>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<OutBoundDetail> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<OutBoundDetail> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
