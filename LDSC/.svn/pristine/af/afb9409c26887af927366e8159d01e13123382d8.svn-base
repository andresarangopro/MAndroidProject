package com.lubin.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lubin.bean.TakeStockOrder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TAKE_STOCK_ORDER".
*/
public class TakeStockOrderDao extends AbstractDao<TakeStockOrder, Long> {

    public static final String TABLENAME = "TAKE_STOCK_ORDER";

    /**
     * Properties of entity TakeStockOrder.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Code = new Property(1, String.class, "code", false, "CODE");
        public final static Property TakeStockId = new Property(2, String.class, "takeStockId", false, "TAKE_STOCK_ID");
        public final static Property WarehouseName = new Property(3, String.class, "warehouseName", false, "WAREHOUSE_NAME");
    }

    private DaoSession daoSession;


    public TakeStockOrderDao(DaoConfig config) {
        super(config);
    }
    
    public TakeStockOrderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TAKE_STOCK_ORDER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CODE\" TEXT," + // 1: code
                "\"TAKE_STOCK_ID\" TEXT," + // 2: takeStockId
                "\"WAREHOUSE_NAME\" TEXT);"); // 3: warehouseName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TAKE_STOCK_ORDER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TakeStockOrder entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(2, code);
        }
 
        String takeStockId = entity.getTakeStockId();
        if (takeStockId != null) {
            stmt.bindString(3, takeStockId);
        }
 
        String warehouseName = entity.getWarehouseName();
        if (warehouseName != null) {
            stmt.bindString(4, warehouseName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TakeStockOrder entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(2, code);
        }
 
        String takeStockId = entity.getTakeStockId();
        if (takeStockId != null) {
            stmt.bindString(3, takeStockId);
        }
 
        String warehouseName = entity.getWarehouseName();
        if (warehouseName != null) {
            stmt.bindString(4, warehouseName);
        }
    }

    @Override
    protected final void attachEntity(TakeStockOrder entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TakeStockOrder readEntity(Cursor cursor, int offset) {
        TakeStockOrder entity = new TakeStockOrder( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // code
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // takeStockId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // warehouseName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TakeStockOrder entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTakeStockId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWarehouseName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TakeStockOrder entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TakeStockOrder entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TakeStockOrder entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
