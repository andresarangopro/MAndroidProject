package com.lide.app.ui.inbound;

import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v7.app.AlertDialog;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.Button;

import com.lide.app.R;
import com.lide.app.adapter.ControlIBOrderAdapter;
import com.lide.app.adapter.InBoundBoxAdapter;
import com.lide.app.config.Configs;
import com.lide.app.listener.OnFinishListener;
import com.lide.app.persistence.util.DBOperator;
import com.lide.app.persistence.util.Utils;
import com.lide.app.persistence.widget.view.SwipeListView;
import com.lide.app.presenter.ScanPresenter;
import com.lide.app.ui.FragmentBase;
import com.lide.app.ui.SearchActivity;
import com.lide.app.ui.inbound.LS.InboundActivity;
import com.lubin.bean.InBoundCase;
import com.lubin.bean.InBoundOrder;
import com.lubin.dao.InBoundCaseDao;
import com.lubin.dao.InBoundOrderDao;

import java.util.ArrayList;
import java.util.List;

import butterknife.BindView;
import butterknife.ButterKnife;

/**
 * Created by Li De on 2016/9/22.
 */
//按订单收货界面
public class InBoundByBoxsFragment extends FragmentBase {

    @BindView(R.id.goods_order_upload)
    Button goodsOrderUpload;

    @BindView(R.id.swipe_lv)
    SwipeListView lv = null;
    private View mView;
    private ControlIBOrderAdapter mAdapter;
    private List<InBoundOrder> orders = new ArrayList<>();
    private ControlInBoundOrderActivity mActivity;
    private ScanPresenter scanPresenter;
    private DBOperator<InBoundCaseDao, InBoundCase> caseDBOperator;
    private DBOperator<InBoundOrderDao, InBoundOrder> orderDBOperator;

    @Nullable
    @Override
    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        mView = inflater.inflate(R.layout.fragment_inbound_order_layout, container, false);
        ButterKnife.bind(this, mView);
        mActivity = (ControlInBoundOrderActivity) getActivity();
        orderDBOperator = InboundTransaction.getOrderDBOperator();
        caseDBOperator = InboundTransaction.getCaseDBOperator();
        initView();
        return mView;
    }

    @Override
    public void onResume() {
        super.onResume();
        initScanPresenter();
        mAdapter.addAll(getAllOrders());
    }

    @Override
    public void onPause() {
        super.onPause();
        scanPresenter.removeListener();
    }

    private void initScanPresenter() {
        scanPresenter = new ScanPresenter(null);
        scanPresenter.initData();
        scanPresenter.setMode(2);
        scanPresenter.setListener(new OnFinishListener() {
            @Override
            public void OnFinish(String data) {
                if (data.isEmpty()) {
                    return;
                }
                List<InBoundCase> list = caseDBOperator.getItemsByParameters(null
                        , InBoundCaseDao.Properties.Code.eq(data));
                if (list.size() == 0) {
                    ShowToast("箱号:" + data + "不存在~");
                } else {
                    InBoundCase inBoundCase = list.get(0);
                    String inboundMode = inBoundCase.getInBoundOrder().getInboundMode();
                    if (inboundMode.equals("MIX")) {
                        showDialog("改单不支持按箱收货");
                    }
                    Intent intent = new Intent(getActivity(), InboundActivity.class);
                    intent.putExtra("inboundModel", inboundMode);
                    intent.putExtra("caseId", inBoundCase.getId());
                    startActivity(intent);
                }
            }
        });
    }

    private void initView() {

        mAdapter = new ControlIBOrderAdapter(getActivity(), orders, this);
        lv.setAdapter(mAdapter);

        lv.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                InBoundOrder inBoundOrder = orders.get(position);
                if (inBoundOrder.getInboundMode().equals("MIX")) {
                    showDialog("改单不支持按箱收货~");
                    return;
                }
                showCheckDialog(inBoundOrder.getCases());
            }
        });

        goodsOrderUpload.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(getActivity(), SearchActivity.class);
                intent.putExtra("Flag", Configs.SearchInBoundOrderFragment);
                startAnimActivity(intent);
            }
        });
    }

    InBoundBoxAdapter boxAdapter;

    public void showCheckDialog(List<InBoundCase> pworder) {
        final AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
        builder.setTitle("箱明细");
        boxAdapter = new InBoundBoxAdapter(getActivity(), pworder);
        builder.setAdapter(boxAdapter, new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                Intent intent = new Intent(getActivity(), InboundActivity.class);
                InBoundCase inBoundCase = boxAdapter.getList().get(which);
                intent.putExtra("caseCode", inBoundCase.getCode());
                intent.putExtra("inboundModel",
                        inBoundCase.getInBoundOrder().getInboundMode());
                startActivity(intent);
                dialog.dismiss();
            }
        });
        builder.show();

    }

    public List<InBoundOrder> getAllOrders() {
        if (Utils.getCurrentUser() != null) {
            if (Utils.getCurrentUser().getWarehouseCode().equals("")) {
                return orderDBOperator.getItemsByParameters("code ASC");
            } else {
                String warehouseCode = Utils.getCurrentUser().getWarehouseCode();
                List<InBoundOrder> list = orderDBOperator.getItemsByParameters("code ASC"
                        , InBoundOrderDao.Properties.ToWarehouseCode.eq(warehouseCode));
                return list;
            }
        } else {
            return orderDBOperator.getItemsByParameters("code ASC");
        }
    }

    @Override
    public void showDialog(String result) {
        super.showDialog(result);
        if (result.equals("刪除成功") || result.equals("审核成功")) {
            mAdapter.addAll(getAllOrders());
        }
    }

}
