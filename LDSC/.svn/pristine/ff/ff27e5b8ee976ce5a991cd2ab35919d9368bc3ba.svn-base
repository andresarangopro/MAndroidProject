package com.lubin.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lubin.bean.OutBoundOrder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "OUT_BOUND_ORDER".
*/
public class OutBoundOrderDao extends AbstractDao<OutBoundOrder, Long> {

    public static final String TABLENAME = "OUT_BOUND_ORDER";

    /**
     * Properties of entity OutBoundOrder.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OrderId = new Property(1, String.class, "orderId", false, "ORDER_ID");
        public final static Property Code = new Property(2, String.class, "code", false, "CODE");
        public final static Property Status = new Property(3, String.class, "status", false, "STATUS");
        public final static Property FromWarehouseId = new Property(4, String.class, "fromWarehouseId", false, "FROM_WAREHOUSE_ID");
        public final static Property ToWarehouseName = new Property(5, String.class, "toWarehouseName", false, "TO_WAREHOUSE_NAME");
        public final static Property ToWarehouseId = new Property(6, String.class, "toWarehouseId", false, "TO_WAREHOUSE_ID");
        public final static Property SyncStatus = new Property(7, Integer.class, "syncStatus", false, "SYNC_STATUS");
        public final static Property OperateQty = new Property(8, Integer.class, "operateQty", false, "OPERATE_QTY");
        public final static Property Qty = new Property(9, Integer.class, "qty", false, "QTY");
        public final static Property Create_time = new Property(10, java.util.Date.class, "create_time", false, "CREATE_TIME");
    }

    private DaoSession daoSession;


    public OutBoundOrderDao(DaoConfig config) {
        super(config);
    }
    
    public OutBoundOrderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"OUT_BOUND_ORDER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ORDER_ID\" TEXT," + // 1: orderId
                "\"CODE\" TEXT," + // 2: code
                "\"STATUS\" TEXT," + // 3: status
                "\"FROM_WAREHOUSE_ID\" TEXT," + // 4: fromWarehouseId
                "\"TO_WAREHOUSE_NAME\" TEXT," + // 5: toWarehouseName
                "\"TO_WAREHOUSE_ID\" TEXT," + // 6: toWarehouseId
                "\"SYNC_STATUS\" INTEGER," + // 7: syncStatus
                "\"OPERATE_QTY\" INTEGER," + // 8: operateQty
                "\"QTY\" INTEGER," + // 9: qty
                "\"CREATE_TIME\" INTEGER);"); // 10: create_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OUT_BOUND_ORDER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OutBoundOrder entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(2, orderId);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(3, code);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(4, status);
        }
 
        String fromWarehouseId = entity.getFromWarehouseId();
        if (fromWarehouseId != null) {
            stmt.bindString(5, fromWarehouseId);
        }
 
        String toWarehouseName = entity.getToWarehouseName();
        if (toWarehouseName != null) {
            stmt.bindString(6, toWarehouseName);
        }
 
        String toWarehouseId = entity.getToWarehouseId();
        if (toWarehouseId != null) {
            stmt.bindString(7, toWarehouseId);
        }
 
        Integer syncStatus = entity.getSyncStatus();
        if (syncStatus != null) {
            stmt.bindLong(8, syncStatus);
        }
 
        Integer operateQty = entity.getOperateQty();
        if (operateQty != null) {
            stmt.bindLong(9, operateQty);
        }
 
        Integer qty = entity.getQty();
        if (qty != null) {
            stmt.bindLong(10, qty);
        }
 
        java.util.Date create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindLong(11, create_time.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OutBoundOrder entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(2, orderId);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(3, code);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(4, status);
        }
 
        String fromWarehouseId = entity.getFromWarehouseId();
        if (fromWarehouseId != null) {
            stmt.bindString(5, fromWarehouseId);
        }
 
        String toWarehouseName = entity.getToWarehouseName();
        if (toWarehouseName != null) {
            stmt.bindString(6, toWarehouseName);
        }
 
        String toWarehouseId = entity.getToWarehouseId();
        if (toWarehouseId != null) {
            stmt.bindString(7, toWarehouseId);
        }
 
        Integer syncStatus = entity.getSyncStatus();
        if (syncStatus != null) {
            stmt.bindLong(8, syncStatus);
        }
 
        Integer operateQty = entity.getOperateQty();
        if (operateQty != null) {
            stmt.bindLong(9, operateQty);
        }
 
        Integer qty = entity.getQty();
        if (qty != null) {
            stmt.bindLong(10, qty);
        }
 
        java.util.Date create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindLong(11, create_time.getTime());
        }
    }

    @Override
    protected final void attachEntity(OutBoundOrder entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public OutBoundOrder readEntity(Cursor cursor, int offset) {
        OutBoundOrder entity = new OutBoundOrder( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // orderId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // code
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // status
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fromWarehouseId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // toWarehouseName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // toWarehouseId
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // syncStatus
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // operateQty
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // qty
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)) // create_time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OutBoundOrder entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrderId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStatus(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFromWarehouseId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setToWarehouseName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setToWarehouseId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSyncStatus(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setOperateQty(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setQty(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setCreate_time(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(OutBoundOrder entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(OutBoundOrder entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OutBoundOrder entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
