package com.lubin.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.lubin.bean.OutBoundDetail;
import com.lubin.bean.OutBoundOrder;

import com.lubin.bean.OutBoundOperate;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "OUT_BOUND_OPERATE".
*/
public class OutBoundOperateDao extends AbstractDao<OutBoundOperate, Long> {

    public static final String TABLENAME = "OUT_BOUND_OPERATE";

    /**
     * Properties of entity OutBoundOperate.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Barcode = new Property(1, String.class, "barcode", false, "BARCODE");
        public final static Property TagValue = new Property(2, String.class, "tagValue", false, "TAG_VALUE");
        public final static Property DeviceId = new Property(3, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property OperateQty = new Property(4, Integer.class, "operateQty", false, "OPERATE_QTY");
        public final static Property MultiBarcodeId = new Property(5, String.class, "multiBarcodeId", false, "MULTI_BARCODE_ID");
        public final static Property IsUpload = new Property(6, Boolean.class, "isUpload", false, "IS_UPLOAD");
        public final static Property OutBoundOrderId = new Property(7, Long.class, "outBoundOrderId", false, "OUT_BOUND_ORDER_ID");
        public final static Property OutBoundDetailId = new Property(8, Long.class, "outBoundDetailId", false, "OUT_BOUND_DETAIL_ID");
    }

    private DaoSession daoSession;

    private Query<OutBoundOperate> outBoundOrder_OperatesQuery;
    private Query<OutBoundOperate> outBoundDetail_OperatesQuery;

    public OutBoundOperateDao(DaoConfig config) {
        super(config);
    }
    
    public OutBoundOperateDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"OUT_BOUND_OPERATE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"BARCODE\" TEXT," + // 1: barcode
                "\"TAG_VALUE\" TEXT," + // 2: tagValue
                "\"DEVICE_ID\" TEXT," + // 3: deviceId
                "\"OPERATE_QTY\" INTEGER," + // 4: operateQty
                "\"MULTI_BARCODE_ID\" TEXT," + // 5: multiBarcodeId
                "\"IS_UPLOAD\" INTEGER," + // 6: isUpload
                "\"OUT_BOUND_ORDER_ID\" INTEGER," + // 7: outBoundOrderId
                "\"OUT_BOUND_DETAIL_ID\" INTEGER);"); // 8: outBoundDetailId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OUT_BOUND_OPERATE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OutBoundOperate entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String barcode = entity.getBarcode();
        if (barcode != null) {
            stmt.bindString(2, barcode);
        }
 
        String tagValue = entity.getTagValue();
        if (tagValue != null) {
            stmt.bindString(3, tagValue);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(4, deviceId);
        }
 
        Integer operateQty = entity.getOperateQty();
        if (operateQty != null) {
            stmt.bindLong(5, operateQty);
        }
 
        String multiBarcodeId = entity.getMultiBarcodeId();
        if (multiBarcodeId != null) {
            stmt.bindString(6, multiBarcodeId);
        }
 
        Boolean isUpload = entity.getIsUpload();
        if (isUpload != null) {
            stmt.bindLong(7, isUpload ? 1L: 0L);
        }
 
        Long outBoundOrderId = entity.getOutBoundOrderId();
        if (outBoundOrderId != null) {
            stmt.bindLong(8, outBoundOrderId);
        }
 
        Long outBoundDetailId = entity.getOutBoundDetailId();
        if (outBoundDetailId != null) {
            stmt.bindLong(9, outBoundDetailId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OutBoundOperate entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String barcode = entity.getBarcode();
        if (barcode != null) {
            stmt.bindString(2, barcode);
        }
 
        String tagValue = entity.getTagValue();
        if (tagValue != null) {
            stmt.bindString(3, tagValue);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(4, deviceId);
        }
 
        Integer operateQty = entity.getOperateQty();
        if (operateQty != null) {
            stmt.bindLong(5, operateQty);
        }
 
        String multiBarcodeId = entity.getMultiBarcodeId();
        if (multiBarcodeId != null) {
            stmt.bindString(6, multiBarcodeId);
        }
 
        Boolean isUpload = entity.getIsUpload();
        if (isUpload != null) {
            stmt.bindLong(7, isUpload ? 1L: 0L);
        }
 
        Long outBoundOrderId = entity.getOutBoundOrderId();
        if (outBoundOrderId != null) {
            stmt.bindLong(8, outBoundOrderId);
        }
 
        Long outBoundDetailId = entity.getOutBoundDetailId();
        if (outBoundDetailId != null) {
            stmt.bindLong(9, outBoundDetailId);
        }
    }

    @Override
    protected final void attachEntity(OutBoundOperate entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public OutBoundOperate readEntity(Cursor cursor, int offset) {
        OutBoundOperate entity = new OutBoundOperate( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // barcode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tagValue
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // deviceId
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // operateQty
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // multiBarcodeId
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // isUpload
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // outBoundOrderId
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8) // outBoundDetailId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OutBoundOperate entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBarcode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTagValue(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDeviceId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOperateQty(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setMultiBarcodeId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsUpload(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setOutBoundOrderId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setOutBoundDetailId(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(OutBoundOperate entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(OutBoundOperate entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OutBoundOperate entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "Operates" to-many relationship of OutBoundOrder. */
    public List<OutBoundOperate> _queryOutBoundOrder_Operates(Long outBoundOrderId) {
        synchronized (this) {
            if (outBoundOrder_OperatesQuery == null) {
                QueryBuilder<OutBoundOperate> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.OutBoundOrderId.eq(null));
                outBoundOrder_OperatesQuery = queryBuilder.build();
            }
        }
        Query<OutBoundOperate> query = outBoundOrder_OperatesQuery.forCurrentThread();
        query.setParameter(0, outBoundOrderId);
        return query.list();
    }

    /** Internal query to resolve the "Operates" to-many relationship of OutBoundDetail. */
    public List<OutBoundOperate> _queryOutBoundDetail_Operates(Long outBoundDetailId) {
        synchronized (this) {
            if (outBoundDetail_OperatesQuery == null) {
                QueryBuilder<OutBoundOperate> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.OutBoundDetailId.eq(null));
                outBoundDetail_OperatesQuery = queryBuilder.build();
            }
        }
        Query<OutBoundOperate> query = outBoundDetail_OperatesQuery.forCurrentThread();
        query.setParameter(0, outBoundDetailId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getOutBoundOrderDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getOutBoundDetailDao().getAllColumns());
            builder.append(" FROM OUT_BOUND_OPERATE T");
            builder.append(" LEFT JOIN OUT_BOUND_ORDER T0 ON T.\"OUT_BOUND_ORDER_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN OUT_BOUND_DETAIL T1 ON T.\"OUT_BOUND_DETAIL_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected OutBoundOperate loadCurrentDeep(Cursor cursor, boolean lock) {
        OutBoundOperate entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        OutBoundOrder outBoundOrder = loadCurrentOther(daoSession.getOutBoundOrderDao(), cursor, offset);
        entity.setOutBoundOrder(outBoundOrder);
        offset += daoSession.getOutBoundOrderDao().getAllColumns().length;

        OutBoundDetail outBoundDetail = loadCurrentOther(daoSession.getOutBoundDetailDao(), cursor, offset);
        entity.setOutBoundDetail(outBoundDetail);

        return entity;    
    }

    public OutBoundOperate loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<OutBoundOperate> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<OutBoundOperate> list = new ArrayList<OutBoundOperate>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<OutBoundOperate> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<OutBoundOperate> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
