package com.lubin.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lubin.bean.TakeStockEpcCollect;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TAKE_STOCK_EPC_COLLECT".
*/
public class TakeStockEpcCollectDao extends AbstractDao<TakeStockEpcCollect, Long> {

    public static final String TABLENAME = "TAKE_STOCK_EPC_COLLECT";

    /**
     * Properties of entity TakeStockEpcCollect.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TaskId = new Property(1, String.class, "taskId", false, "TASK_ID");
        public final static Property Epc = new Property(2, String.class, "epc", false, "EPC");
        public final static Property IsUpload = new Property(3, Boolean.class, "isUpload", false, "IS_UPLOAD");
    }


    public TakeStockEpcCollectDao(DaoConfig config) {
        super(config);
    }
    
    public TakeStockEpcCollectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TAKE_STOCK_EPC_COLLECT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TASK_ID\" TEXT," + // 1: taskId
                "\"EPC\" TEXT," + // 2: epc
                "\"IS_UPLOAD\" INTEGER);"); // 3: isUpload
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TAKE_STOCK_EPC_COLLECT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TakeStockEpcCollect entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String taskId = entity.getTaskId();
        if (taskId != null) {
            stmt.bindString(2, taskId);
        }
 
        String epc = entity.getEpc();
        if (epc != null) {
            stmt.bindString(3, epc);
        }
 
        Boolean isUpload = entity.getIsUpload();
        if (isUpload != null) {
            stmt.bindLong(4, isUpload ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TakeStockEpcCollect entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String taskId = entity.getTaskId();
        if (taskId != null) {
            stmt.bindString(2, taskId);
        }
 
        String epc = entity.getEpc();
        if (epc != null) {
            stmt.bindString(3, epc);
        }
 
        Boolean isUpload = entity.getIsUpload();
        if (isUpload != null) {
            stmt.bindLong(4, isUpload ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TakeStockEpcCollect readEntity(Cursor cursor, int offset) {
        TakeStockEpcCollect entity = new TakeStockEpcCollect( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // taskId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // epc
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0 // isUpload
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TakeStockEpcCollect entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTaskId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEpc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsUpload(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TakeStockEpcCollect entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TakeStockEpcCollect entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TakeStockEpcCollect entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
