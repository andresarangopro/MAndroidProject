package com.lide.app.ui.binding;

import android.content.Intent;
import android.os.Bundle;
import android.support.v7.widget.Toolbar;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.WindowManager;
import android.view.inputmethod.EditorInfo;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.google.gson.internal.LinkedTreeMap;
import com.lide.app.R;
import com.lide.app.adapter.BindingAdapter;
import com.lide.app.listener.OnFinishListener;
import com.lide.app.persistence.util.SoundUtils;
import com.lide.app.persistence.util.Utils;
import com.lide.app.presenter.ScanPresenter;
import com.lide.app.presenter.binding.BindingPresenter;
import com.lide.app.ui.BaseActivity;
import com.lide.app.ui.LoginActivity;
import com.lide.app.ui.VInterface.IDataFragmentView;

import java.util.ArrayList;
import java.util.List;

import butterknife.BindView;
import butterknife.ButterKnife;
import butterknife.OnClick;

/**
 * Created by lubin on 2016/11/24.
 */

public class OneToManyBindingActivity extends BaseActivity implements IDataFragmentView<List<LinkedTreeMap>> {

    @BindView(R.id.tv_one_to_many)
    TextView tvOneToMany;
    @BindView(R.id.tb_one_to_many)
    Toolbar tbOneToMany;
    @BindView(R.id.et_barcode)
    EditText etBarcode;
    @BindView(R.id.lv_epc_container)
    ListView lvEpcContainer;
    @BindView(R.id.btn_read_rfid)
    Button btnReadRfid;
    @BindView(R.id.btn_scan_barcode)
    Button btnScanBarcode;
    @BindView(R.id.btn_binding)
    Button btnBinding;
    @BindView(R.id.ll_container)
    LinearLayout llContainer;
    @BindView(R.id.tv_sku_name)
    TextView tvSkuName;
    @BindView(R.id.tv_sum)
    TextView tvSum;

    private ScanPresenter scanPresenter;
    private BindingPresenter bindingPresenter;
    private List<LinkedTreeMap> viableData = new ArrayList<>();
    private BindingAdapter mAdapter;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN);
        setContentView(R.layout.activity_one_to_many);
        ButterKnife.bind(this);
        initView();
    }

    @Override
    protected void onResume() {
        super.onResume();
        tvOneToMany.setText("一对多绑定");
        initScanPresenter();
        tbOneToMany.setTitle("");
    }

    @Override
    protected void onPause() {
        super.onPause();
        scanPresenter.setMode(0);
        scanPresenter.stopReadRfid();
        scanPresenter.removeListener();
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu_binding, menu);
        return true;
    }

    private void initScanPresenter() {
        bindingPresenter = new BindingPresenter(this);
        scanPresenter = new ScanPresenter(this);
        scanPresenter.initData();
        scanPresenter.setMode(2);
        scanPresenter.setReadDataModel(0);
        scanPresenter.setCurrentSetting(ScanPresenter.Setting.bindingMore);
        scanPresenter.setListenerProtectModel(new OnFinishListener() {
            @Override
            public void OnFinish(String data) {
                SoundUtils.play(1);
                if (etBarcode.hasFocus()) {
                    etBarcode.setText(data);
                    searchSku(data);
                    mAdapter.clearAll();
                    tvSum.setText("0");
                    scanPresenter.initData();
                } else {
                    LinkedTreeMap map = new LinkedTreeMap<>();
                    map.put("epc", data);
                    viableData.add(map);
                    tvSum.setText(String.valueOf(viableData.size()));
                    mAdapter.notifyDataSetChanged();
                }
            }
        });
    }

    public void initView() {
        setSupportActionBar(tbOneToMany);

        tbOneToMany.setNavigationIcon(R.mipmap.back_login);
        tbOneToMany.setNavigationOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                finish();
            }
        });
        tbOneToMany.setOnMenuItemClickListener(new Toolbar.OnMenuItemClickListener() {
            @Override
            public boolean onMenuItemClick(MenuItem item) {
                switch (item.getItemId()) {
                    case R.id.action_clear:
                        mAdapter.clearAll();
                        tvSum.setText("0");
                        scanPresenter.initData();
                        break;
                }
                return true;
            }
        });

        etBarcode.setImeOptions(EditorInfo.IME_ACTION_SEND);
        etBarcode.setOnEditorActionListener(new TextView.OnEditorActionListener() {
            @Override
            public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
                if (event != null)
                    if (event.getAction() == KeyEvent.ACTION_UP) return true;
                if (actionId == EditorInfo.IME_ACTION_SEND || actionId == 0) {
                    if (etBarcode.getText().toString().equals("")) {
                        showDialog("请输入条码~");
                    } else {
                        searchSku(etBarcode.getText().toString());
                    }
                    return true;
                }
                return false;
            }
        });
        etBarcode.setOnFocusChangeListener(new View.OnFocusChangeListener() {
            @Override
            public void onFocusChange(View v, boolean hasFocus) {
                if (hasFocus) {
                    if (scanPresenter != null)
                        scanPresenter.setMode(2);
                    setCurrentModel(1);
                } else {
                    scanPresenter.setMode(1);
                }
            }
        });

        mAdapter = new BindingAdapter(this, viableData);
        lvEpcContainer.setAdapter(mAdapter);

        setCurrentModel(1);

    }


    @Override
    public void ShowToast(final String text) {
        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                if (text.equals("该条码不存在数据库")) {
                    Toast.makeText(OneToManyBindingActivity.this, etBarcode.getText().toString() + text, Toast.LENGTH_SHORT).show();
                } else if (text.equals("条码可绑定")) {
                    setCurrentModel(0);
                    readOrClose();
                    Toast.makeText(OneToManyBindingActivity.this, etBarcode.getText().toString() + text, Toast.LENGTH_SHORT).show();
                } else if (text.equals("绑定成功")) {
                    Toast.makeText(OneToManyBindingActivity.this, text, Toast.LENGTH_LONG).show();
                    mAdapter.clearAll();
                    etBarcode.setText("");
                    tvSum.setText("0");
                    tvSkuName.setText("");
                    setCurrentModel(1);
                }
            }
        });
    }

    @Override
    public void ShowData(List<LinkedTreeMap> linkedTreeMaps) {
        if (etBarcode.hasFocus()) {
            tvSkuName.setText(String.valueOf(linkedTreeMaps.get(0).get("name")));
        } else {
            for (LinkedTreeMap linkedTreeMap : linkedTreeMaps) {
                for (LinkedTreeMap treeMap : viableData) {
                    if (treeMap.get("epc").equals(linkedTreeMap.get("epc"))) {
                        treeMap.put("barcode", linkedTreeMap.get("barcode"));
                    }
                }
            }
            mAdapter.notifyDataSetChanged();

            tvSum.setText(String.valueOf(viableData.size()));

        }
    }

    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (keyCode == 138) {
            if (event.getRepeatCount() == 0) {
                if (etBarcode.hasFocus()) {
                    scanService.scanBarcode();
                }
                return true;
            }
        }

        if (keyCode == 120 || keyCode == 5) {
            if (event.getRepeatCount() == 0) {
                if (!etBarcode.hasFocus() && btnReadRfid.isEnabled()) {
                    readOrClose();
                }
                return true;
            }
        }
        if (keyCode == 6) {
            if (event.getRepeatCount() == 0) {
                if (!etBarcode.hasFocus()) {
                    if (btnReadRfid.getText().toString().equals("读取")) {
                        binding();
                    } else {
                        binding();
                        readOrClose();
                    }
                }
            }
        }
        return super.onKeyDown(keyCode, event);
    }

    private void readOrClose() {
        if (btnReadRfid.getText().equals("读取")) {
            scanPresenter.startReadRfid();
            btnReadRfid.setText("停止");
            btnReadRfid.setBackground(redBackground);
        } else {
            scanPresenter.stopReadRfid();
            btnReadRfid.setText("读取");
            btnReadRfid.setBackground(commonBackground);
        }
    }

    //设置当前模式
    public void setCurrentModel(int currentModel) {
        switch (currentModel) {
            case 0://读rfid模式
                llContainer.requestFocus();
                btnReadRfid.setBackground(commonBackground);
                btnReadRfid.setEnabled(true);
                btnScanBarcode.setBackground(grayBackground);
                btnScanBarcode.setEnabled(false);
                btnBinding.setBackground(commonBackground);
                btnBinding.setEnabled(true);
                break;
            case 1:
                etBarcode.requestFocus();
                btnReadRfid.setBackground(grayBackground);
                btnReadRfid.setEnabled(false);
                if (btnReadRfid.getText().toString().equals("停止")) {
                    btnReadRfid.setText("读取");
                    scanPresenter.stopReadRfid();
                }
                btnScanBarcode.setBackground(commonBackground);
                btnScanBarcode.setEnabled(true);
                btnBinding.setBackground(grayBackground);
                btnBinding.setEnabled(false);
                break;
        }
    }


    private void searchSku(String data) {
        if (Utils.getApiKey() == null) {
            Intent intent = new Intent(OneToManyBindingActivity.this, LoginActivity.class);
            intent.putExtra("isAtNet", true);
            startAnimActivity(intent);
            return;
        }
        bindingPresenter.searchSku(data);
    }

    @OnClick({R.id.btn_read_rfid, R.id.btn_scan_barcode, R.id.btn_binding})
    public void onClick(View view) {
        switch (view.getId()) {
            case R.id.btn_read_rfid:
                readOrClose();
                break;
            case R.id.btn_scan_barcode:
                scanPresenter.startScanBarcode();
                break;
            case R.id.btn_binding:
                if (!etBarcode.hasFocus()) {
                    if (btnReadRfid.getText().toString().equals("读取")) {
                        binding();
                    } else {
                        binding();
                        readOrClose();
                    }
                }
                break;
            case R.id.ll_container:
                llContainer.requestFocus();
                break;
        }
    }

    private void binding() {
        if (etBarcode.getText().toString().equals("")) {
            ShowToast("请扫描条码先~");
            setCurrentModel(1);
            return;
        }
        List<String> tags = new ArrayList<>();
        for (LinkedTreeMap linkedTreeMap : viableData) {
            tags.add(linkedTreeMap.get("epc").toString());
        }
        bindingPresenter.binding(tags);
    }
}
