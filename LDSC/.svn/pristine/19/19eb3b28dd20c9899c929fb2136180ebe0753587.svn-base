package com.lubin.bean;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import com.lubin.dao.DaoSession;
import org.greenrobot.greendao.DaoException;

import com.lubin.dao.CheckTaskDao;
import com.lubin.dao.OrderDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "ORDER".
 */
@Entity(active = true)
public class Order {

    @Id
    private Long id;
    private String code;
    private String takeStockId;
    private String warehouseName;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient OrderDao myDao;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "orderId")
    })
    private List<CheckTask> tasks;

    @Generated
    public Order() {
    }

    public Order(Long id) {
        this.id = id;
    }

    @Generated
    public Order(Long id, String code, String takeStockId, String warehouseName) {
        this.id = id;
        this.code = code;
        this.takeStockId = takeStockId;
        this.warehouseName = warehouseName;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getOrderDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getCode() {
        return code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    public String getTakeStockId() {
        return takeStockId;
    }

    public void setTakeStockId(String takeStockId) {
        this.takeStockId = takeStockId;
    }

    public String getWarehouseName() {
        return warehouseName;
    }

    public void setWarehouseName(String warehouseName) {
        this.warehouseName = warehouseName;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<CheckTask> getTasks() {
        if (tasks == null) {
            __throwIfDetached();
            CheckTaskDao targetDao = daoSession.getCheckTaskDao();
            List<CheckTask> tasksNew = targetDao._queryOrder_Tasks(id);
            synchronized (this) {
                if(tasks == null) {
                    tasks = tasksNew;
                }
            }
        }
        return tasks;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetTasks() {
        tasks = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
