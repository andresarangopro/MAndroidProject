package com.lubin.bean;

import org.greenrobot.greendao.annotation.*;

import com.lubin.dao.DaoSession;
import org.greenrobot.greendao.DaoException;

import com.lubin.dao.OutBoundDetailDao;
import com.lubin.dao.OutBoundOperateDao;
import com.lubin.dao.OutBoundOrderDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "OUT_BOUND_OPERATE".
 */
@Entity(active = true)
public class OutBoundOperate {

    @Id
    private Long id;
    private String barcode;
    private String tagValue;
    private String deviceId;
    private Integer operateQty;
    private String multiBarcodeId;
    private Boolean isUpload;
    private Long outBoundOrderId;
    private Long outBoundDetailId;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient OutBoundOperateDao myDao;

    @ToOne(joinProperty = "outBoundOrderId")
    private OutBoundOrder outBoundOrder;

    @Generated
    private transient Long outBoundOrder__resolvedKey;

    @ToOne(joinProperty = "outBoundDetailId")
    private OutBoundDetail outBoundDetail;

    @Generated
    private transient Long outBoundDetail__resolvedKey;

    @Generated
    public OutBoundOperate() {
    }

    public OutBoundOperate(Long id) {
        this.id = id;
    }

    @Generated
    public OutBoundOperate(Long id, String barcode, String tagValue, String deviceId, Integer operateQty, String multiBarcodeId, Boolean isUpload, Long outBoundOrderId, Long outBoundDetailId) {
        this.id = id;
        this.barcode = barcode;
        this.tagValue = tagValue;
        this.deviceId = deviceId;
        this.operateQty = operateQty;
        this.multiBarcodeId = multiBarcodeId;
        this.isUpload = isUpload;
        this.outBoundOrderId = outBoundOrderId;
        this.outBoundDetailId = outBoundDetailId;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getOutBoundOperateDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getBarcode() {
        return barcode;
    }

    public void setBarcode(String barcode) {
        this.barcode = barcode;
    }

    public String getTagValue() {
        return tagValue;
    }

    public void setTagValue(String tagValue) {
        this.tagValue = tagValue;
    }

    public String getDeviceId() {
        return deviceId;
    }

    public void setDeviceId(String deviceId) {
        this.deviceId = deviceId;
    }

    public Integer getOperateQty() {
        return operateQty;
    }

    public void setOperateQty(Integer operateQty) {
        this.operateQty = operateQty;
    }

    public String getMultiBarcodeId() {
        return multiBarcodeId;
    }

    public void setMultiBarcodeId(String multiBarcodeId) {
        this.multiBarcodeId = multiBarcodeId;
    }

    public Boolean getIsUpload() {
        return isUpload;
    }

    public void setIsUpload(Boolean isUpload) {
        this.isUpload = isUpload;
    }

    public Long getOutBoundOrderId() {
        return outBoundOrderId;
    }

    public void setOutBoundOrderId(Long outBoundOrderId) {
        this.outBoundOrderId = outBoundOrderId;
    }

    public Long getOutBoundDetailId() {
        return outBoundDetailId;
    }

    public void setOutBoundDetailId(Long outBoundDetailId) {
        this.outBoundDetailId = outBoundDetailId;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public OutBoundOrder getOutBoundOrder() {
        Long __key = this.outBoundOrderId;
        if (outBoundOrder__resolvedKey == null || !outBoundOrder__resolvedKey.equals(__key)) {
            __throwIfDetached();
            OutBoundOrderDao targetDao = daoSession.getOutBoundOrderDao();
            OutBoundOrder outBoundOrderNew = targetDao.load(__key);
            synchronized (this) {
                outBoundOrder = outBoundOrderNew;
            	outBoundOrder__resolvedKey = __key;
            }
        }
        return outBoundOrder;
    }

    @Generated
    public void setOutBoundOrder(OutBoundOrder outBoundOrder) {
        synchronized (this) {
            this.outBoundOrder = outBoundOrder;
            outBoundOrderId = outBoundOrder == null ? null : outBoundOrder.getId();
            outBoundOrder__resolvedKey = outBoundOrderId;
        }
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public OutBoundDetail getOutBoundDetail() {
        Long __key = this.outBoundDetailId;
        if (outBoundDetail__resolvedKey == null || !outBoundDetail__resolvedKey.equals(__key)) {
            __throwIfDetached();
            OutBoundDetailDao targetDao = daoSession.getOutBoundDetailDao();
            OutBoundDetail outBoundDetailNew = targetDao.load(__key);
            synchronized (this) {
                outBoundDetail = outBoundDetailNew;
            	outBoundDetail__resolvedKey = __key;
            }
        }
        return outBoundDetail;
    }

    @Generated
    public void setOutBoundDetail(OutBoundDetail outBoundDetail) {
        synchronized (this) {
            this.outBoundDetail = outBoundDetail;
            outBoundDetailId = outBoundDetail == null ? null : outBoundDetail.getId();
            outBoundDetail__resolvedKey = outBoundDetailId;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
