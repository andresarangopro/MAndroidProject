package com.lide.app.model;

import com.google.gson.Gson;
import com.lide.app.bean.BeanToJson.ProductToJsonForDiff;
import com.lide.app.bean.BeanToJson.QueryEpcDiff;
import com.lide.app.bean.BeanToJson.SKUToJsonForDiff;
import com.lide.app.bean.JsonToBean.EPCDiff;
import com.lide.app.bean.JsonToBean.ProductDiff;
import com.lide.app.bean.JsonToBean.SkuDiff;
import com.lide.app.listener.OnLoadFinishListener;
import com.lide.app.persistence.util.NetWorkUtil;
import com.lide.app.persistence.util.Utils;

import java.util.HashMap;
import java.util.Map;

public class QueryDiffModel {
    //api地址
    private String apiUrl;

    public QueryDiffModel() {
        apiUrl = Utils.apiUrl;
    }

    public void queryCollectData(final OnLoadFinishListener listener) {
        Map<String, String> map = new HashMap<>();

        NetWorkUtil.setListener(new OnLoadFinishListener() {
            @Override
            public void OnLoadFinish(Map<String, String> map) {
                listener.OnLoadFinish(map);
            }
        });

        String apiMethod = "api/takeStockOrder/"
                + Utils.getCurrentTask().getOrder().getTakeStockId()
                + "/collect";
        String postUrl = apiUrl + apiMethod;

        map.put("postUrl", postUrl);
        map.put("requestJsonData", "{}");
        map.put("apiKey", Utils.getApiKey());

        NetWorkUtil.StartNetWork(map);
    }

    public void LoadProductDiff(String key, int currentProductPage, final OnLoadFinishListener listener) {

        String apiMethod = "api/takeStockOrder/findDiff/product";
        String postUrl = apiUrl + apiMethod;

        ProductToJsonForDiff productToJsonForDiff = new ProductToJsonForDiff();
        productToJsonForDiff.diffType = "ALL";
        productToJsonForDiff.id = Utils.getCurrentTask().getOrder().getTakeStockId();
        if (key != null)
            productToJsonForDiff.productCode = key;
        else {
            productToJsonForDiff.orderByField = "productCode";
            productToJsonForDiff.currentPage = currentProductPage;
            productToJsonForDiff.isPageable = true;
            productToJsonForDiff.recordsPerPage = 10;
        }
        String requestJsonData = new Gson().toJson(productToJsonForDiff);

        NetWorkUtil.startNetWord(requestJsonData, postUrl, listener);
    }

    public void LoadSkuDiff(String key, String productCode, final OnLoadFinishListener listener) {

        String apiMethod = "api/takeStockOrder/findDiff/sku";
        String postUrl = apiUrl + apiMethod;

        SKUToJsonForDiff skuToJsonForDiff = new SKUToJsonForDiff();
        skuToJsonForDiff.diffType = "ALL";
        skuToJsonForDiff.id = Utils.getCurrentTask().getOrder().getTakeStockId();
        if (key != null) {
            skuToJsonForDiff.barcode = key;
        } else {
            skuToJsonForDiff.productCode = productCode;
        }
        String requestJsonData = new Gson().toJson(skuToJsonForDiff);

        NetWorkUtil.startNetWord(requestJsonData, postUrl, listener);
    }

    public void LoadEPC(String key, int currentEpcPage, String barcode, final OnLoadFinishListener listener) {

        String apiMethod = "api/takeStockOrder/findEpc/barcode";
        String postUrl = apiUrl + apiMethod;

        QueryEpcDiff queryEpcDiff = new QueryEpcDiff();
        queryEpcDiff.id = Utils.getCurrentTask().getOrder().getTakeStockId();
        if (key != null) {
            queryEpcDiff.epc = key;
        } else {
            queryEpcDiff.isPageable = true;
            queryEpcDiff.currentPage = currentEpcPage;
            queryEpcDiff.orderByField = "epc";
            queryEpcDiff.recordsPerPage = 10;
            queryEpcDiff.barcode = barcode;
        }
        String requestJsonData = new Gson().toJson(queryEpcDiff);

        NetWorkUtil.startNetWord(requestJsonData, postUrl, listener);
    }

    public ProductDiff toProductDiff(String result) {
        return ProductDiff.objectFromData(result);
    }

    public SkuDiff toSkuDiff(String result) {
        return SkuDiff.objectFromData(result);
    }

    public EPCDiff toEPC(String result) {
        return EPCDiff.objectFromData(result);
    }

}
