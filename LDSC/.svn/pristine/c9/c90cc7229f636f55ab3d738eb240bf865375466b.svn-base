package com.lubin.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.lubin.bean.TakeStockOrder;
import com.lubin.bean.User;

import com.lubin.bean.TakeStockTask;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TAKE_STOCK_TASK".
*/
public class TakeStockTaskDao extends AbstractDao<TakeStockTask, Long> {

    public static final String TABLENAME = "TAKE_STOCK_TASK";

    /**
     * Properties of entity TakeStockTask.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property WarehouseCode = new Property(2, String.class, "warehouseCode", false, "WAREHOUSE_CODE");
        public final static Property CodeId = new Property(3, String.class, "codeId", false, "CODE_ID");
        public final static Property RealPoint = new Property(4, Integer.class, "realPoint", false, "REAL_POINT");
        public final static Property Complete = new Property(5, Boolean.class, "complete", false, "COMPLETE");
        public final static Property Date = new Property(6, java.util.Date.class, "date", false, "DATE");
        public final static Property UpperCase = new Property(7, String.class, "upperCase", false, "UPPER_CASE");
        public final static Property LowerCase = new Property(8, String.class, "lowerCase", false, "LOWER_CASE");
        public final static Property Mode = new Property(9, Integer.class, "mode", false, "MODE");
        public final static Property UserId = new Property(10, Long.class, "userId", false, "USER_ID");
        public final static Property OrderId = new Property(11, Long.class, "orderId", false, "ORDER_ID");
    }

    private DaoSession daoSession;

    private Query<TakeStockTask> user_TasksQuery;
    private Query<TakeStockTask> takeStockOrder_TasksQuery;

    public TakeStockTaskDao(DaoConfig config) {
        super(config);
    }
    
    public TakeStockTaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TAKE_STOCK_TASK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"WAREHOUSE_CODE\" TEXT," + // 2: warehouseCode
                "\"CODE_ID\" TEXT," + // 3: codeId
                "\"REAL_POINT\" INTEGER," + // 4: realPoint
                "\"COMPLETE\" INTEGER," + // 5: complete
                "\"DATE\" INTEGER," + // 6: date
                "\"UPPER_CASE\" TEXT," + // 7: upperCase
                "\"LOWER_CASE\" TEXT," + // 8: lowerCase
                "\"MODE\" INTEGER," + // 9: mode
                "\"USER_ID\" INTEGER," + // 10: userId
                "\"ORDER_ID\" INTEGER);"); // 11: orderId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TAKE_STOCK_TASK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TakeStockTask entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String warehouseCode = entity.getWarehouseCode();
        if (warehouseCode != null) {
            stmt.bindString(3, warehouseCode);
        }
 
        String codeId = entity.getCodeId();
        if (codeId != null) {
            stmt.bindString(4, codeId);
        }
 
        Integer realPoint = entity.getRealPoint();
        if (realPoint != null) {
            stmt.bindLong(5, realPoint);
        }
 
        Boolean complete = entity.getComplete();
        if (complete != null) {
            stmt.bindLong(6, complete ? 1L: 0L);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(7, date.getTime());
        }
 
        String upperCase = entity.getUpperCase();
        if (upperCase != null) {
            stmt.bindString(8, upperCase);
        }
 
        String lowerCase = entity.getLowerCase();
        if (lowerCase != null) {
            stmt.bindString(9, lowerCase);
        }
 
        Integer mode = entity.getMode();
        if (mode != null) {
            stmt.bindLong(10, mode);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(11, userId);
        }
 
        Long orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindLong(12, orderId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TakeStockTask entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String warehouseCode = entity.getWarehouseCode();
        if (warehouseCode != null) {
            stmt.bindString(3, warehouseCode);
        }
 
        String codeId = entity.getCodeId();
        if (codeId != null) {
            stmt.bindString(4, codeId);
        }
 
        Integer realPoint = entity.getRealPoint();
        if (realPoint != null) {
            stmt.bindLong(5, realPoint);
        }
 
        Boolean complete = entity.getComplete();
        if (complete != null) {
            stmt.bindLong(6, complete ? 1L: 0L);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(7, date.getTime());
        }
 
        String upperCase = entity.getUpperCase();
        if (upperCase != null) {
            stmt.bindString(8, upperCase);
        }
 
        String lowerCase = entity.getLowerCase();
        if (lowerCase != null) {
            stmt.bindString(9, lowerCase);
        }
 
        Integer mode = entity.getMode();
        if (mode != null) {
            stmt.bindLong(10, mode);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(11, userId);
        }
 
        Long orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindLong(12, orderId);
        }
    }

    @Override
    protected final void attachEntity(TakeStockTask entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TakeStockTask readEntity(Cursor cursor, int offset) {
        TakeStockTask entity = new TakeStockTask( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // warehouseCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // codeId
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // realPoint
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // complete
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // date
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // upperCase
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // lowerCase
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // mode
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // userId
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11) // orderId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TakeStockTask entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWarehouseCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCodeId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRealPoint(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setComplete(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setDate(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setUpperCase(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLowerCase(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMode(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setUserId(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setOrderId(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TakeStockTask entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TakeStockTask entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TakeStockTask entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "tasks" to-many relationship of User. */
    public List<TakeStockTask> _queryUser_Tasks(Long userId) {
        synchronized (this) {
            if (user_TasksQuery == null) {
                QueryBuilder<TakeStockTask> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                user_TasksQuery = queryBuilder.build();
            }
        }
        Query<TakeStockTask> query = user_TasksQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

    /** Internal query to resolve the "tasks" to-many relationship of TakeStockOrder. */
    public List<TakeStockTask> _queryTakeStockOrder_Tasks(Long orderId) {
        synchronized (this) {
            if (takeStockOrder_TasksQuery == null) {
                QueryBuilder<TakeStockTask> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.OrderId.eq(null));
                takeStockOrder_TasksQuery = queryBuilder.build();
            }
        }
        Query<TakeStockTask> query = takeStockOrder_TasksQuery.forCurrentThread();
        query.setParameter(0, orderId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getTakeStockOrderDao().getAllColumns());
            builder.append(" FROM TAKE_STOCK_TASK T");
            builder.append(" LEFT JOIN USER T0 ON T.\"USER_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN TAKE_STOCK_ORDER T1 ON T.\"ORDER_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected TakeStockTask loadCurrentDeep(Cursor cursor, boolean lock) {
        TakeStockTask entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        User user = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
        entity.setUser(user);
        offset += daoSession.getUserDao().getAllColumns().length;

        TakeStockOrder takeStockOrder = loadCurrentOther(daoSession.getTakeStockOrderDao(), cursor, offset);
        entity.setTakeStockOrder(takeStockOrder);

        return entity;    
    }

    public TakeStockTask loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<TakeStockTask> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<TakeStockTask> list = new ArrayList<TakeStockTask>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<TakeStockTask> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<TakeStockTask> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
